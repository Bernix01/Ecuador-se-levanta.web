{"version":3,"sources":["../../../../server/api/place/place.integration.js"],"names":[],"mappings":"AAAA;;AAGA;;;;AACA;;;;;;AAFA,IAAI,MAAM,QAAQ,OAAR,CAAV;;;AAIA,IAAI,QAAJ;;AAEA,SAAS,YAAT,EAAuB,YAAW;;AAEhC,SAAO,YAAW;AAChB,WAAO,gBAAM,MAAN,GAAe,IAAf,CAAoB,YAAW;AACpC,iBAAW,oBAAU;AACnB,cAAM,WADa;AAEnB,cAAM;AAFa,OAAV,CAAX;;AAKA,aAAO,SAAS,IAAT,EAAP;AACD,KAPM,CAAP;AAQD,GATD;;;AAYA,QAAM,YAAW;AACf,WAAO,gBAAM,MAAN,EAAP;AACD,GAFD;;AAIA,WAAS,iBAAT,EAA4B,YAAW;AACrC,QAAI,MAAJ;;AAEA,eAAW,UAAS,IAAT,EAAe;AACxB,+BAAQ,GAAR,EACG,GADH,CACO,aADP,EAEG,MAFH,CAEU,GAFV,EAGG,MAHH,CAGU,cAHV,EAG0B,MAH1B,EAIG,GAJH,CAIO,UAAC,GAAD,EAAM,GAAN,EAAc;AACjB,YAAI,GAAJ,EAAS;AACP,iBAAO,KAAK,GAAL,CAAP;AACD;AACD,iBAAS,IAAI,IAAb;AACA;AACD,OAVH;AAWD,KAZD;;AAcA,OAAG,gCAAH,EAAqC,YAAW;AAC9C,aAAO,MAAP,CAAc,EAAd,CAAiB,UAAjB,CAA4B,KAA5B;AACD,KAFD;AAID,GArBD;;AAwBA,WAAS,qBAAT,EAAgC,YAAW;AACzC,QAAI,KAAJ;;AAEA,eAAW,UAAS,IAAT,EAAe;AACxB,+BAAQ,GAAR,EACG,GADH,CACO,iBAAiB,SAAS,GADjC,EAEG,MAFH,CAEU,GAFV,EAGG,MAHH,CAGU,cAHV,EAG0B,MAH1B,EAIG,GAJH,CAIO,UAAC,GAAD,EAAM,GAAN,EAAc;AACjB,YAAI,GAAJ,EAAS;AACP,iBAAO,KAAK,GAAL,CAAP;AACD;AACD,gBAAQ,IAAI,IAAZ;AACA;AACD,OAVH;AAWD,KAZD;;AAcA,cAAU,YAAW;AACnB,cAAQ,EAAR;AACD,KAFD;;AAIA,OAAG,yCAAH,EAA8C,YAAW;AACvD,YAAM,IAAN,CAAW,MAAX,CAAkB,KAAlB,CAAwB,WAAxB;AACA,YAAM,IAAN,CAAW,MAAX,CAAkB,KAAlB,CAAwB,gCAAxB;AACD,KAHD;AAKD,GA1BD;AA6BD,CAvED","file":"place.integration.js","sourcesContent":["'use strict';\n\nvar app = require('../..');\nimport request from 'supertest';\nimport Place from './place.model';\n\nvar newPlace;\n\ndescribe('Place API:', function() {\n\n  before(function() {\n    return Place.remove().then(function() {\n      newPlace = new Place({\n        name: 'New Place',\n        htgo: 'This is the brand new place!!!'\n      });\n\n      return newPlace.save();\n    });\n  });\n\n  // Clear palces after testing\n  after(function() {\n    return Place.remove();\n  });\n\n  describe('GET /api/places', function() {\n    var places;\n\n    beforeEach(function(done) {\n      request(app)\n        .get('/api/places')\n        .expect(200)\n        .expect('Content-Type', /json/)\n        .end((err, res) => {\n          if (err) {\n            return done(err);\n          }\n          places = res.body;\n          done();\n        });\n    });\n\n    it('should respond with JSON array', function() {\n      places.should.be.instanceOf(Array);\n    });\n\n  });\n\n\n  describe('GET /api/places/:id', function() {\n    var place;\n\n    beforeEach(function(done) {\n      request(app)\n        .get('/api/places/' + newPlace._id)\n        .expect(200)\n        .expect('Content-Type', /json/)\n        .end((err, res) => {\n          if (err) {\n            return done(err);\n          }\n          place = res.body;\n          done();\n        });\n    });\n\n    afterEach(function() {\n      place = {};\n    });\n\n    it('should respond with the requested place', function() {\n      place.name.should.equal('New Place');\n      place.htgo.should.equal('This is the brand new place!!!');\n    });\n\n  });\n\n\n});\n"]}